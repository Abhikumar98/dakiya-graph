// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MessageSent extends ethereum.Event {
  get params(): MessageSent__Params {
    return new MessageSent__Params(this);
  }
}

export class MessageSent__Params {
  _event: MessageSent;

  constructor(event: MessageSent) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Messaging__getMessagesResultValue0Struct extends ethereum.Tuple {
  get receiver(): Address {
    return this[0].toAddress();
  }

  get uri(): string {
    return this[1].toString();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class Messaging__getThreadResultValue0Struct extends ethereum.Tuple {
  get thread_id(): BigInt {
    return this[0].toBigInt();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get receiver_key(): string {
    return this[2].toString();
  }

  get sender(): Address {
    return this[3].toAddress();
  }

  get sender_key(): string {
    return this[4].toString();
  }
}

export class Messaging__messagesResult {
  value0: Address;
  value1: string;
  value2: BigInt;

  constructor(value0: Address, value1: string, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Messaging extends ethereum.SmartContract {
  static bind(address: Address): Messaging {
    return new Messaging("Messaging", address);
  }

  getAllThreads(): Array<BigInt> {
    let result = super.call("getAllThreads", "getAllThreads():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getAllThreads(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllThreads",
      "getAllThreads():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getMessages(
    thread_id: BigInt
  ): Array<Messaging__getMessagesResultValue0Struct> {
    let result = super.call(
      "getMessages",
      "getMessages(uint256):((address,string,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(thread_id)]
    );

    return result[0].toTupleArray<Messaging__getMessagesResultValue0Struct>();
  }

  try_getMessages(
    thread_id: BigInt
  ): ethereum.CallResult<Array<Messaging__getMessagesResultValue0Struct>> {
    let result = super.tryCall(
      "getMessages",
      "getMessages(uint256):((address,string,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(thread_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Messaging__getMessagesResultValue0Struct>()
    );
  }

  getThread(thread_id: BigInt): Messaging__getThreadResultValue0Struct {
    let result = super.call(
      "getThread",
      "getThread(uint256):((uint256,address,string,address,string))",
      [ethereum.Value.fromUnsignedBigInt(thread_id)]
    );

    return changetype<Messaging__getThreadResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getThread(
    thread_id: BigInt
  ): ethereum.CallResult<Messaging__getThreadResultValue0Struct> {
    let result = super.tryCall(
      "getThread",
      "getThread(uint256):((uint256,address,string,address,string))",
      [ethereum.Value.fromUnsignedBigInt(thread_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Messaging__getThreadResultValue0Struct>(value[0].toTuple())
    );
  }

  messages(param0: BigInt, param1: BigInt): Messaging__messagesResult {
    let result = super.call(
      "messages",
      "messages(uint256,uint256):(address,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Messaging__messagesResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt()
    );
  }

  try_messages(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Messaging__messagesResult> {
    let result = super.tryCall(
      "messages",
      "messages(uint256,uint256):(address,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Messaging__messagesResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt()
      )
    );
  }

  messagesIndex(): BigInt {
    let result = super.call("messagesIndex", "messagesIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_messagesIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "messagesIndex",
      "messagesIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  threadCount(): BigInt {
    let result = super.call("threadCount", "threadCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_threadCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("threadCount", "threadCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SendMessageCall extends ethereum.Call {
  get inputs(): SendMessageCall__Inputs {
    return new SendMessageCall__Inputs(this);
  }

  get outputs(): SendMessageCall__Outputs {
    return new SendMessageCall__Outputs(this);
  }
}

export class SendMessageCall__Inputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get _thread_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _sender_key(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _receiver_key(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class SendMessageCall__Outputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }
}
